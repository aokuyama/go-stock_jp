// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	common "github.com/aokuyama/go-stock_jp/model/common"
	order "github.com/aokuyama/go-stock_jp/model/order"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockOrderRepository) Insert(o *order.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockOrderRepositoryMockRecorder) Insert(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockOrderRepository)(nil).Insert), o)
}

// LoadByDate mocks base method.
func (m *MockOrderRepository) LoadByDate(date *common.Date) (*order.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadByDate", date)
	ret0, _ := ret[0].(*order.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadByDate indicates an expected call of LoadByDate.
func (mr *MockOrderRepositoryMockRecorder) LoadByDate(date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadByDate", reflect.TypeOf((*MockOrderRepository)(nil).LoadByDate), date)
}

// Update mocks base method.
func (m *MockOrderRepository) Update(after, before *order.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", after, before)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockOrderRepositoryMockRecorder) Update(after, before interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOrderRepository)(nil).Update), after, before)
}
