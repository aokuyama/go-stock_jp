// Code generated by MockGen. DO NOT EDIT.
// Source: calendar_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	common "github.com/aokuyama/go-stock_jp/common"
	calendar "github.com/aokuyama/go-stock_jp/model/calendar"
	gomock "github.com/golang/mock/gomock"
)

// MockCalendarRepository is a mock of CalendarRepository interface.
type MockCalendarRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCalendarRepositoryMockRecorder
}

// MockCalendarRepositoryMockRecorder is the mock recorder for MockCalendarRepository.
type MockCalendarRepositoryMockRecorder struct {
	mock *MockCalendarRepository
}

// NewMockCalendarRepository creates a new mock instance.
func NewMockCalendarRepository(ctrl *gomock.Controller) *MockCalendarRepository {
	mock := &MockCalendarRepository{ctrl: ctrl}
	mock.recorder = &MockCalendarRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCalendarRepository) EXPECT() *MockCalendarRepositoryMockRecorder {
	return m.recorder
}

// LoadByDateRange mocks base method.
func (m *MockCalendarRepository) LoadByDateRange(date_range *common.DateRange) (*calendar.Calendar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadByDateRange", date_range)
	ret0, _ := ret[0].(*calendar.Calendar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadByDateRange indicates an expected call of LoadByDateRange.
func (mr *MockCalendarRepositoryMockRecorder) LoadByDateRange(date_range interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadByDateRange", reflect.TypeOf((*MockCalendarRepository)(nil).LoadByDateRange), date_range)
}
